# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2021 Intel Corporation

---
- name: flush handlers
  meta: flush_handlers

- name: dependencies not satisfied
  fail:
    msg: "Please define: \n- driver_name\n- driver_version\n- driver_url\n- driver_checksum\
          \n- current_mgmt_driver\nvariables if you want to use that role.\nSee README for examples."
  when: >
    driver_name is undefined or
    driver_version is undefined or
    driver_url is undefined or
    driver_checksum is undefined or
    current_mgmt_driver is undefined

- name: install dependencies
  include_role:
    name: infrastructure/install_dependencies
  vars:
    install_excluded_packages: "{{ install_kernel_dependency_yum }}"

- name: get current {{ driver_name }} version
  command: modinfo {{ driver_name }} -F version
  register: installed_version
  changed_when: false
  failed_when: false

- name: build selected driver
  block:
    - name: set driver directory
      set_fact:
        driver_dir: "{{ '/'.join([project_dir, driver_name]) }}"

    - name: create directory for {{ driver_name }} files
      file:
        state: directory
        path: "{{ driver_dir }}"
        owner: "{{ project_user }}"
        group: "{{ project_group }}"
        mode: a=rx,u+w

    - name: download {{ driver_name }} driver
      get_url:
        url: "{{ driver_url }}"
        dest: "{{ driver_dir }}"
        checksum: "{{ driver_checksum }}"
        timeout: "{{ driver_download_timeout }}"
      register: downloaded_driver
      until: downloaded_driver is not failed
      retries: "{{ number_of_retries | default(5) }}"

    - name: get driver lsmod output
      shell: set -o pipefail && lsmod | grep {{ driver_name }}
      register: lsmod_driver
      changed_when: false
      failed_when: false

    - name: unload {{ unload_driver_name }} module
      modprobe:
        name: "{{ unload_driver_name }}"
        state: absent
      become: yes
      when: unload_driver_name in lsmod_driver.stdout

    - name: unload {{ driver_name }} module
      modprobe:
        name: "{{ driver_name }}"
        state: absent
      become: yes
      when: current_mgmt_driver != driver_name

    - name: untar {{ driver_name }} driver sources
      unarchive:
        src: "{{ '/'.join([project_dir, driver_name, driver_name + '-' + driver_version + '.tar.gz']) }}"
        dest: "{{ driver_dir }}"
        list_files: true
        remote_src: true
        mode: a=rx,u+w
      become: yes
      register: untar_results

    - name: build and install {{ driver_name }} driver
      command:
        cmd: "make -j {{ item }}"
        chdir: "{{ '/'.join([untar_results.dest, untar_results.files[0], 'src']) }}"
      changed_when: false
      become: yes
      loop:
        - clean
        - install

    - name: reboot if driver is used by management interface
      reboot:
        reboot_timeout: 1200  # wait up to 20 minutes
      become: yes
      when: current_mgmt_driver == driver_name
  when: (installed_version.stdout | default('')) != driver_version

- name: ensure that {{ driver_name }} module is loaded
  modprobe:
    name: "{{ driver_name }}"
    state: present
  become: yes
