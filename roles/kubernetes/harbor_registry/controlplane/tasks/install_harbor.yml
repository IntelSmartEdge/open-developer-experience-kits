# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2021 Intel Corporation
---
- name: download helm-harbor repo
  get_url:
    url: "{{ offline_file_server }}/harbor.tar.gz"
    dest: "{{ project_dir }}"

- name: extract downloaded harbor chart tar ball
  shell:
    cmd: cd "{{ project_dir }}" && tar -zxvf harbor.tar.gz && cd -

- name: generate admin password
  set_fact:
    harbor_admin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits') }}"

- name: create namespace for harbor
  include_role:
    name: baseline_ansible/kubernetes/custom_namespace
  vars:
    - _custom_ns: ["{{ _harbor_namespace }}"]

- name: delete old Harbor admin secret if it exists
  command: kubectl delete secret -n {{ _harbor_namespace }} harbor-admin --ignore-not-found=true
  changed_when: true

- name: create Harbor admin secret
  command: >
    kubectl create secret -n {{ _harbor_namespace }} generic harbor-admin
    --from-literal=admin-password={{ harbor_admin_password }}
  changed_when: true

- name: copy harbor helm chart values.j2 replace default values.yml
  template:
    src: values.j2
    dest: "{{ _git_repo_dest_harbor }}/values.yaml"
    mode: a=r,u+w

# Following line sets the tls version and available ciphers. This should be replaced in future releases!!!
- name: patch used tls version and ciphers
  replace:
    path: "{{ _git_repo_dest_harbor }}/templates/nginx/configmap-https.yaml"
    regexp: "{{ item.regex }}"
    replace: "{{ item.newline }}"
  loop:
    - {
        regex: "ssl_protocols\\ (TLSv1\\.[0-9]+\\ ?)*;",
        newline: "ssl_protocols TLSv1.2 TLSv1.3;",
      }
    - {
        regex: "ssl_ciphers\\ '.*';",
        newline: "ssl_ciphers 'TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384';",
      }

- name: make pv disk
  file:
    path: "{{ _harbor_pv_dir }}/{{ item }}"
    state: directory
    mode: a=,u=rwx
  loop:
    - harbor-disk1
    - harbor-disk2
    - harbor-disk3
    - harbor-disk4
    - harbor-disk5
    - harbor-disk6

- name: copy pv disk.yaml to host
  template:
    src: templates/disks.j2
    dest: "{{ _git_repo_dest_harbor }}/disks.yaml"
    mode: a=rx,u+w

- name: create PersistentVolume for harbor
  command: kubectl apply -f {{ _git_repo_dest_harbor }}/disks.yaml
  changed_when: false

- name: helm install
  command: helm install harbor-app -f values.yaml . -n {{ _harbor_namespace }}
  args:
    chdir: "{{ _git_repo_dest_harbor }}"
  ignore_errors: false
  changed_when: false
  environment:
    PATH: "/usr/sbin:{{ ansible_env.PATH }}"

- name: copy Harbor network policy
  copy:
    src: harbor-np.yml
    dest: "{{ _git_repo_dest_harbor }}"
    mode: preserve

- name: Apply Harbor network policy
  command: "kubectl apply -f {{ _git_repo_dest_harbor }}/harbor-np.yml"
  changed_when: false

- name: Wait for harbor pods to be ready
  command: kubectl wait --for=condition=Ready pods --all --namespace={{ _harbor_namespace }} --timeout=30m
  changed_when: false
  register: harbor_pods
